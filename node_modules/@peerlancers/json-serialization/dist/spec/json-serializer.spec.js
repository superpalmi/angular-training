"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_object_model_1 = require("./json-object.model");
const json_serializer_1 = require("../src/json-serializer");
describe('serialize', () => {
    it('should serialized the person object including its children.', () => {
        var personDetails = new json_object_model_1.Person();
        personDetails.firstName = 'John';
        personDetails.lastName = 'Doe';
        personDetails.gender = json_object_model_1.Gender.Male;
        personDetails.currentAge = 25;
        personDetails.maritalStatus = null;
        personDetails.friends = [];
        personDetails.friends.push('recca');
        personDetails.friends.push({ name: 'goku', skill: 'sayan' });
        personDetails.friends.push('gohan');
        personDetails.skills = ['playing-guitar', 'playing-piano', 'vocalist'];
        personDetails.hobbies = [];
        let firstHobby = new json_object_model_1.Hobby();
        firstHobby.hobbyName = 'playing-guitar';
        firstHobby.description = 'It helps me relax';
        personDetails.hobbies.push(firstHobby);
        personDetails.children = [];
        let firstChild = new json_object_model_1.Person();
        firstChild.firstName = 'JohnKid1';
        firstChild.lastName = 'Doe1';
        firstChild.gender = json_object_model_1.Gender.Female;
        firstChild.currentAge = 3;
        firstChild.skills = ['one', 'two'];
        personDetails.children.push(firstChild);
        let secondChild = new json_object_model_1.Person();
        secondChild.firstName = 'JohnKid2';
        secondChild.lastName = 'Doe2';
        secondChild.gender = json_object_model_1.Gender.Male;
        secondChild.currentAge = 5;
        secondChild.skills = ['third', 'fourth'];
        personDetails.children.push(secondChild);
        var serializedPerson = json_serializer_1.serialize(personDetails);
        expect(serializedPerson).toBeDefined();
        expect(serializedPerson.firstName).toBe('John');
        expect(serializedPerson.lastName).toBe('Doe');
        expect(serializedPerson.fullName).toBeUndefined();
        expect(serializedPerson.age).toBe(25);
        expect(serializedPerson.maritalStatus).toBeNull();
        expect(serializedPerson.gender).toBe('Male');
        expect(serializedPerson.friends.length).toBe(3);
        expect(serializedPerson.friends[0]).toBe('recca');
        expect(serializedPerson.friends[1].name).toBe('goku');
        expect(serializedPerson.friends[2]).toBe('gohan');
        expect(serializedPerson.skills.length).toBe(3);
        expect(serializedPerson.skills[0]).toBe('playing-guitar');
        expect(serializedPerson.skills[1]).toBe('playing-piano');
        expect(serializedPerson.skills[2]).toBe('vocalist');
        expect(serializedPerson.hobbies.length).toBe(1);
        expect(serializedPerson.hobbies[0].title).toBe('playing-guitar');
        expect(serializedPerson.hobbies[0].description).toBe('It helps me relax');
        expect(serializedPerson.children.length).toBe(2);
        expect(serializedPerson.children[0].fullName).toBeUndefined();
        expect(serializedPerson.children[0].age).toBe(3);
        expect(serializedPerson.children[0].gender).toBe('Female');
        expect(serializedPerson.children[1].fullName).toBeUndefined();
        expect(serializedPerson.children[1].age).toBe(5);
        expect(serializedPerson.children[1].gender).toBe('Male');
    });
    it('should serialized the array object to json format.', () => {
        var persons = [];
        var person1 = new json_object_model_1.Person();
        person1.firstName = 'John';
        person1.lastName = 'Doe';
        person1.gender = json_object_model_1.Gender.Male;
        person1.currentAge = 25;
        person1.skills = ['playing-guitar', 'playing-piano', 'vocalist'];
        person1.children = [];
        persons.push(person1);
        var person2 = new json_object_model_1.Person();
        person2.firstName = 'Jane';
        person2.lastName = 'Doe';
        person2.gender = json_object_model_1.Gender.Female;
        person2.currentAge = 26;
        person2.skills = ['playing-guitar', 'playing-piano', 'vocalist'];
        person2.children = [];
        persons.push(person2);
        var serializedPersons = json_serializer_1.serialize(persons);
        expect(serializedPersons).toBeDefined();
        expect(serializedPersons.length).toBe(2);
        expect(serializedPersons[0].fullName).toBeUndefined();
        expect(serializedPersons[0].firstName).toBe('John');
        expect(serializedPersons[0].lastName).toBe('Doe');
        expect(serializedPersons[0].age).toBe(25);
        expect(serializedPersons[0].gender).toBe('Male');
        expect(serializedPersons[0].skills.length).toBe(3);
        expect(serializedPersons[0].skills[0]).toBe('playing-guitar');
        expect(serializedPersons[0].skills[1]).toBe('playing-piano');
        expect(serializedPersons[0].skills[2]).toBe('vocalist');
        expect(serializedPersons[1].fullName).toBeUndefined();
        expect(serializedPersons[1].firstName).toBe('Jane');
        expect(serializedPersons[1].lastName).toBe('Doe');
        expect(serializedPersons[1].age).toBe(26);
        expect(serializedPersons[1].gender).toBe('Female');
        expect(serializedPersons[1].skills.length).toBe(3);
        expect(serializedPersons[1].skills[0]).toBe('playing-guitar');
        expect(serializedPersons[1].skills[1]).toBe('playing-piano');
        expect(serializedPersons[1].skills[2]).toBe('vocalist');
    });
    it('should serialized the property fields in the model since they are not part of the payload.', () => {
        var personDetails = new json_object_model_1.Person();
        personDetails.firstName = 'John';
        personDetails.lastName = 'Doe';
        personDetails.gender = json_object_model_1.Gender.Male;
        personDetails.currentAge = 25;
        personDetails.skills = ['playing-guitar', 'playing-piano', 'vocalist'];
        personDetails.children = [];
        var serializedPerson = json_serializer_1.serialize(personDetails);
        expect(serializedPerson).toBeDefined();
        expect(serializedPerson.fullName).toBeUndefined();
        expect(serializedPerson.firstName).toBe('John');
        expect(serializedPerson.lastName).toBe('Doe');
        expect(serializedPerson.age).toBe(25);
        expect(serializedPerson.gender).toBe('Male');
        expect(serializedPerson.skills.length).toBe(3);
        expect(serializedPerson.skills[0]).toBe('playing-guitar');
        expect(serializedPerson.skills[1]).toBe('playing-piano');
        expect(serializedPerson.skills[2]).toBe('vocalist');
    });
});
