"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_object_model_1 = require("./json-object.model");
const json_deserializer_1 = require("../src/json-deserializer");
describe('deserializing object:', () => {
    it('should deserialized the person object including its children.', () => {
        var personJson = {
            firstName: 'John',
            lastName: 'Doe',
            gender: 'Male',
            age: 25,
            maritalStatus: null,
            parent: {
                firstName: 'saitama',
                lastName: 'one-punch'
            },
            friends: [
                'recca',
                { name: 'goku', skill: 'sayan' },
                'gohan'
            ],
            skills: [
                'playing-guitar',
                'playing-piano',
                'vocalist'
            ],
            children: [
                {
                    firstName: 'JohnKid1',
                    lastName: 'Doe1',
                    gender: 'Female',
                    age: 3
                },
                {
                    firstName: 'JohnKid2',
                    lastName: 'Doe2',
                    gender: 'Male',
                    age: 5
                }
            ]
        };
        var deserializedPerson = json_deserializer_1.deserialize(json_object_model_1.Person, personJson);
        expect(deserializedPerson).toBeDefined();
        expect(deserializedPerson.firstName).toBe('John');
        expect(deserializedPerson.lastName).toBe('Doe');
        expect(deserializedPerson.fullName).toBe('John Doe');
        expect(deserializedPerson.currentAge).toBe(25);
        expect(deserializedPerson.maritalStatus).toBeNull();
        expect(deserializedPerson.gender).toBe(json_object_model_1.Gender.Male);
        expect(deserializedPerson.parent.firstName).toBe('saitama');
        expect(deserializedPerson.parent.lastName).toBe('one-punch');
        expect(deserializedPerson.friends.length).toBe(3);
        expect(deserializedPerson.friends[0]).toBe('recca');
        expect(deserializedPerson.friends[1].name).toBe('goku');
        expect(deserializedPerson.friends[2]).toBe('gohan');
        expect(deserializedPerson.skills.length).toBe(3);
        expect(deserializedPerson.skills[0]).toBe('playing-guitar');
        expect(deserializedPerson.skills[1]).toBe('playing-piano');
        expect(deserializedPerson.skills[2]).toBe('vocalist');
        expect(deserializedPerson.children.length).toBe(2);
        expect(deserializedPerson.children[0].fullName).toBe('JohnKid1 Doe1');
        expect(deserializedPerson.children[0].currentAge).toBe(3);
        expect(deserializedPerson.children[0].gender).toBe(json_object_model_1.Gender.Female);
        expect(deserializedPerson.children[1].fullName).toBe('JohnKid2 Doe2');
        expect(deserializedPerson.children[1].currentAge).toBe(5);
        expect(deserializedPerson.children[1].gender).toBe(json_object_model_1.Gender.Male);
    });
    it('should deserialized the array of person objects.', () => {
        var personsJson = [{
                firstName: 'John',
                lastName: 'Doe',
                gender: 'Male',
                age: 25,
                maritalStatus: null
            },
            {
                firstName: 'Jane',
                lastName: 'Doe',
                gender: 'Female',
                age: 26,
                maritalStatus: null
            }];
        var deserializedPersons = json_deserializer_1.deserialize(json_object_model_1.Person, personsJson);
        expect(deserializedPersons).toBeDefined();
        expect(deserializedPersons[0].firstName).toBe('John');
        expect(deserializedPersons[0].lastName).toBe('Doe');
        expect(deserializedPersons[0].fullName).toBe('John Doe');
        expect(deserializedPersons[0].currentAge).toBe(25);
        expect(deserializedPersons[0].maritalStatus).toBeNull();
        expect(deserializedPersons[0].gender).toBe(json_object_model_1.Gender.Male);
        expect(deserializedPersons).toBeDefined();
        expect(deserializedPersons[1].firstName).toBe('Jane');
        expect(deserializedPersons[1].lastName).toBe('Doe');
        expect(deserializedPersons[1].fullName).toBe('Jane Doe');
        expect(deserializedPersons[1].currentAge).toBe(26);
        expect(deserializedPersons[1].maritalStatus).toBeNull();
        expect(deserializedPersons[1].gender).toBe(json_object_model_1.Gender.Female);
    });
    it('should not deserialized the records that are not in the model.', () => {
        var personJson = {
            firstName: 'John',
            lastName: 'Doe',
            genderMale: 'Male',
            ignoredField: 'something',
            skills: [],
            children: [
                {
                    firstName: 'JohnKid1',
                    lastName: 'Doe1',
                    gender: 'Female',
                    age: 3
                }
            ]
        };
        var deserializedPerson = json_deserializer_1.deserialize(json_object_model_1.Person, personJson);
        expect(deserializedPerson).toBeDefined();
        expect(deserializedPerson.firstName).toBe('John');
        expect(deserializedPerson.lastName).toBe('Doe');
        expect(deserializedPerson.fullName).toBe('John Doe');
        expect(deserializedPerson.currentAge).toBeUndefined;
        expect(deserializedPerson.gender).toBeUndefined();
        expect(deserializedPerson.ignoredField).toBeUndefined();
        expect(deserializedPerson.skills.length).toBe(0);
        expect(deserializedPerson.children.length).toBe(1);
        expect(deserializedPerson.children[0].fullName).toBe('JohnKid1 Doe1');
        expect(deserializedPerson.children[0].currentAge).toBe(3);
        expect(deserializedPerson.children[0].gender).toBe(json_object_model_1.Gender.Female);
    });
});
