"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_helper_1 = require("./json-helper");
/**
 * Deserializes the json object based on the target object instance
 * @param target The target object instance for deserialization
 * @param jsonObject Json object to be deserialized
 * @return Deserialized target object instance
 */
function deserialize(target, jsonObject) {
    if (!jsonObject) {
        return undefined;
    }
    if (typeof (jsonObject) !== 'object') {
        return undefined;
    }
    return !json_helper_1.isArray(jsonObject) ?
        deserializeObject(target, jsonObject) :
        jsonObject.map((rawJson) => deserializeObject(target, rawJson));
}
exports.deserialize = deserialize;
function deserializeObject(classObject, jsonObject) {
    if (!classObject) {
        return jsonObject;
    }
    let targetInstance = new classObject();
    Object.keys(targetInstance).forEach((propertyKey) => {
        targetInstance[propertyKey] = deserializeProperty(targetInstance, propertyKey, jsonObject);
    });
    return targetInstance;
}
function deserializeProperty(targetInstance, propertyKey, jsonObject) {
    if (!jsonObject) {
        return undefined;
    }
    if (typeof (jsonObject) !== 'object') {
        return undefined;
    }
    let propertyMetadata = json_helper_1.getPropertyMetadata(targetInstance, propertyKey);
    if (!propertyMetadata) {
        return;
    }
    let jsonValue = jsonObject[propertyMetadata.name || propertyKey];
    let hasCustomDeserializer = propertyMetadata.deserializer ? true : false;
    if (hasCustomDeserializer) {
        let customDeserializer = new propertyMetadata.deserializer();
        return customDeserializer && customDeserializer.deserialize(jsonObject[propertyMetadata.name || propertyKey]);
    }
    if (json_helper_1.isArray(jsonValue)) {
        return jsonValue.map((item) => json_helper_1.isPrimitiveType(item) ?
            item : deserializeObject(propertyMetadata.target, item));
    }
    if (json_helper_1.isObject(jsonValue)) {
        if (!propertyMetadata.target) {
            return new Object(jsonValue);
        }
        return deserializeObject(propertyMetadata.target, jsonValue);
    }
    return jsonValue;
}
