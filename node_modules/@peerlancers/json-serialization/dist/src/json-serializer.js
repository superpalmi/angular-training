"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const json_helper_1 = require("./json-helper");
/**
 * Serializes the target object instance to json object
 * @param targetInstance The target object instance to be serialized
 * @return Serialized JSON Object
 */
function serialize(targetInstance) {
    if (!targetInstance) {
        throw new Error(`Cannot parse the target instance of undefined.`);
    }
    return !json_helper_1.isArray(targetInstance) ?
        serializeObject(targetInstance) :
        targetInstance.map((rawObject) => serializeObject(rawObject));
}
exports.serialize = serialize;
function serializeObject(targetInstance) {
    if (typeof (targetInstance) !== 'object') {
        return targetInstance;
    }
    let jsonObject = {};
    Object.keys(targetInstance).forEach((propertyKey) => {
        let propertyMetadata = json_helper_1.getPropertyMetadata(targetInstance, propertyKey);
        jsonObject[(propertyMetadata && propertyMetadata.name) || propertyKey] =
            serializeProperty(targetInstance, propertyKey);
    });
    return jsonObject;
}
function serializeProperty(targetInstance, propertyKey) {
    let propertyValue = targetInstance[propertyKey];
    if (propertyValue === undefined || propertyValue === null) {
        return propertyValue;
    }
    let propertyMetadata = json_helper_1.getPropertyMetadata(targetInstance, propertyKey);
    if (!propertyMetadata) {
        return propertyValue;
    }
    let hasCustomSerializer = propertyMetadata.serializer ? true : false;
    if (hasCustomSerializer) {
        let customSerializer = new propertyMetadata.serializer();
        return customSerializer && customSerializer.serialize(propertyValue);
    }
    if (json_helper_1.isArray(propertyValue)) {
        let propertyArray = new Array(...propertyValue);
        return propertyArray.map((propItem) => !propItem || json_helper_1.isPrimitiveType(propItem) ? propItem : serializeObject(propItem));
    }
    return serializeObject(propertyValue);
}
